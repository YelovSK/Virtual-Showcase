//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/InputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;
using VirtualShowcase.Utilities;

public partial class @InputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }

    public @InputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActions"",
    ""maps"": [
        {
            ""name"": ""Model"",
            ""id"": ""1aa14592-b48a-4efc-90ab-f5278d82d004"",
            ""actions"": [
                {
                    ""name"": ""Rotate X"",
                    ""type"": ""Value"",
                    ""id"": ""a825965b-71de-4c87-a476-1ca7bc8e9c98"",
                    ""expectedControlType"": ""Delta"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rotate Y"",
                    ""type"": ""Value"",
                    ""id"": ""ec88a893-075d-44b4-9c54-31df4c16f1cf"",
                    ""expectedControlType"": ""Delta"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rotate Z"",
                    ""type"": ""Value"",
                    ""id"": ""04f65594-ace9-4bd0-b920-1fbbc103b312"",
                    ""expectedControlType"": ""Delta"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Next model"",
                    ""type"": ""Button"",
                    ""id"": ""02a646bb-2ea5-4e76-9fd0-334f7c2daa7e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Previous model"",
                    ""type"": ""Button"",
                    ""id"": ""32ff5905-eaf4-476c-9d46-467b51b9fe97"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Reset transform"",
                    ""type"": ""Button"",
                    ""id"": ""1c472b4f-7971-45ed-b211-11be091fb6fb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Move X Y"",
                    ""type"": ""PassThrough"",
                    ""id"": ""eb076d61-2e57-4d47-af20-4b23524561f4"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": ""ScaleVector2(x=0.075,y=0.075)"",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Move Y Z"",
                    ""type"": ""PassThrough"",
                    ""id"": ""fdfe0b19-05fa-46fc-bd37-013a2232a95f"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": ""ScaleVector2(x=0.075,y=0.075)"",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Scale"",
                    ""type"": ""Value"",
                    ""id"": ""6bbe502d-29f4-41b0-8720-be8adb8ac7cb"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""One Modifier"",
                    ""id"": ""ea0140ff-7c87-4899-a642-d745540c49b9"",
                    ""path"": ""OneModifier"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate X"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""modifier"",
                    ""id"": ""11e00213-7703-4ccf-aae6-4fe92af86694"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate X"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""binding"",
                    ""id"": ""4f6c2a25-7eb0-49f8-9f35-f35c44000508"",
                    ""path"": ""<Mouse>/delta/y"",
                    ""interactions"": """",
                    ""processors"": ""Scale(factor=0.05)"",
                    ""groups"": """",
                    ""action"": ""Rotate X"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""0e4ff59f-4eb7-4bf5-985d-5efa5f5a4a3b"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Next model"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7ee2ee54-b118-45c0-9038-e8acf9cec970"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Previous model"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bc58d319-e696-4cfc-a82e-fd7aad468726"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Reset transform"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""One Modifier"",
                    ""id"": ""fc305952-fed8-47d6-8c5b-6abeab742fa3"",
                    ""path"": ""OneModifier"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move X Y"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""modifier"",
                    ""id"": ""ce357adf-98a2-43a8-9ff3-6eb7a69147b2"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move X Y"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""binding"",
                    ""id"": ""58106518-f722-4e98-9a6c-803ec691e267"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": ""ScaleVector2(x=4,y=4)"",
                    ""groups"": """",
                    ""action"": ""Move X Y"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""One Modifier"",
                    ""id"": ""d5750b20-692c-4f50-92c1-2ea5976912b9"",
                    ""path"": ""OneModifier"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move Y Z"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""modifier"",
                    ""id"": ""30a0c400-8149-49f3-924d-a40a34b2f02f"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move Y Z"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""binding"",
                    ""id"": ""dd423709-f312-4db0-8ded-2c99a190443d"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": ""ScaleVector2(x=4,y=4)"",
                    ""groups"": """",
                    ""action"": ""Move Y Z"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""07c2d893-5109-49e4-9822-4f4ccc77dfba"",
                    ""path"": ""<Mouse>/scroll/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Scale"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""One Modifier"",
                    ""id"": ""2c87c088-9e76-4bef-b59b-f3d31934ae81"",
                    ""path"": ""OneModifier"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate Y"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""modifier"",
                    ""id"": ""c19ca7b9-3dd8-435e-8dd8-56ec19c5f60a"",
                    ""path"": ""<Keyboard>/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate Y"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""binding"",
                    ""id"": ""74f96b90-6620-4f14-94c8-548974c7e637"",
                    ""path"": ""<Mouse>/delta/x"",
                    ""interactions"": """",
                    ""processors"": ""Scale(factor=0.05)"",
                    ""groups"": """",
                    ""action"": ""Rotate Y"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""One Modifier"",
                    ""id"": ""6bff3c44-e1cd-4f6b-a17a-908ee9171ea7"",
                    ""path"": ""OneModifier"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate Z"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""modifier"",
                    ""id"": ""dd3b48d4-4e60-4f3b-b99c-82ca7ac6e2eb"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate Z"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""binding"",
                    ""id"": ""fddda709-2f44-4755-b75f-c8ea905aa6fe"",
                    ""path"": ""<Mouse>/delta/x"",
                    ""interactions"": """",
                    ""processors"": ""Scale(factor=0.05)"",
                    ""groups"": """",
                    ""action"": ""Rotate Z"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""Menu"",
            ""id"": ""1fc7ee5b-c8b1-4f02-9cd1-930825db0e0a"",
            ""actions"": [
                {
                    ""name"": ""Back"",
                    ""type"": ""Button"",
                    ""id"": ""462395f1-d2a9-4ab1-b518-f12c1c64127c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""42ef5255-602a-47e8-8787-49bd08a9f505"",
                    ""path"": ""<Keyboard>/backspace"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Back"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ce09ae2a-fc52-4f37-9281-75cc38e514f9"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Back"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Calibration"",
            ""id"": ""14cca5c9-d25d-440f-b579-34e2e44e509d"",
            ""actions"": [
                {
                    ""name"": ""Next calibration"",
                    ""type"": ""Button"",
                    ""id"": ""49645d4e-c099-455a-9754-4b35f89d4aed"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Left edge"",
                    ""type"": ""Button"",
                    ""id"": ""6d45d37f-d3b3-4754-9f2c-252755fc4948"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Right edge"",
                    ""type"": ""Button"",
                    ""id"": ""54f30885-fe6e-4e3a-9ad1-929ea61479dd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Bottom edge"",
                    ""type"": ""Button"",
                    ""id"": ""f80d2a49-f58d-4fb7-954a-c19383ee56f0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Top edge"",
                    ""type"": ""Button"",
                    ""id"": ""53eccf2c-4787-4cba-b03a-b27a7b1a1f7f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""63111b8a-e9da-4667-9864-cd4ea09be80a"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Next calibration"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""20dd4056-25b4-48c2-b22f-ad4150a87ab8"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Left edge"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ef8b7de8-1cb7-436c-8fba-5c4f59715e88"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Right edge"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1dd22692-105a-4a18-bc0b-2d1318649091"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Bottom edge"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4b84d0c0-4efa-448a-921a-06fe83a48e1b"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Top edge"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""MainGeneral"",
            ""id"": ""47d59b6c-9090-4a2d-9f88-dda85ce2dee9"",
            ""actions"": [
                {
                    ""name"": ""Calibration toggle"",
                    ""type"": ""Button"",
                    ""id"": ""77db97a9-6682-46f6-a9e2-bc6406b24033"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Stereo toggle"",
                    ""type"": ""Button"",
                    ""id"": ""eeadb41b-cfa2-483c-affa-65860267cca9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Preview toggle"",
                    ""type"": ""Button"",
                    ""id"": ""a16527a1-f213-4f08-ab68-bee4ace220ee"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Menu toggle"",
                    ""type"": ""Button"",
                    ""id"": ""a3c72384-0ba8-457d-a624-2f9c32360e5b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Next scene"",
                    ""type"": ""Button"",
                    ""id"": ""7502a058-0e66-4ce9-9067-b65ffd4faf8f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Previous scene"",
                    ""type"": ""Button"",
                    ""id"": ""410f8fc5-297c-4d6d-9ad5-033328be114e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f0be596d-3733-4d08-8fbf-498ca1a38749"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Calibration toggle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1af7d7b3-76f9-45d2-a867-135db7828987"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Stereo toggle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""17ab4875-26bf-49a5-b6f2-d2f83f92117e"",
                    ""path"": ""<Keyboard>/p"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Preview toggle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d2dbe942-2f29-41d3-8457-392a1343b213"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Menu toggle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b83ac940-599a-4b22-890b-d34ad4810802"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Next scene"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""858478b7-59e3-484a-b9b0-607dbaba1fbe"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Previous scene"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Model
        m_Model = asset.FindActionMap("Model", throwIfNotFound: true);
        m_Model_RotateX = m_Model.FindAction("Rotate X", throwIfNotFound: true);
        m_Model_RotateY = m_Model.FindAction("Rotate Y", throwIfNotFound: true);
        m_Model_RotateZ = m_Model.FindAction("Rotate Z", throwIfNotFound: true);
        m_Model_Nextmodel = m_Model.FindAction("Next model", throwIfNotFound: true);
        m_Model_Previousmodel = m_Model.FindAction("Previous model", throwIfNotFound: true);
        m_Model_Resettransform = m_Model.FindAction("Reset transform", throwIfNotFound: true);
        m_Model_MoveXY = m_Model.FindAction("Move X Y", throwIfNotFound: true);
        m_Model_MoveYZ = m_Model.FindAction("Move Y Z", throwIfNotFound: true);
        m_Model_Scale = m_Model.FindAction("Scale", throwIfNotFound: true);
        // Menu
        m_Menu = asset.FindActionMap("Menu", throwIfNotFound: true);
        m_Menu_Back = m_Menu.FindAction("Back", throwIfNotFound: true);
        // Calibration
        m_Calibration = asset.FindActionMap("Calibration", throwIfNotFound: true);
        m_Calibration_Nextcalibration = m_Calibration.FindAction("Next calibration", throwIfNotFound: true);
        m_Calibration_Leftedge = m_Calibration.FindAction("Left edge", throwIfNotFound: true);
        m_Calibration_Rightedge = m_Calibration.FindAction("Right edge", throwIfNotFound: true);
        m_Calibration_Bottomedge = m_Calibration.FindAction("Bottom edge", throwIfNotFound: true);
        m_Calibration_Topedge = m_Calibration.FindAction("Top edge", throwIfNotFound: true);
        // MainGeneral
        m_MainGeneral = asset.FindActionMap("MainGeneral", throwIfNotFound: true);
        m_MainGeneral_Calibrationtoggle = m_MainGeneral.FindAction("Calibration toggle", throwIfNotFound: true);
        m_MainGeneral_Stereotoggle = m_MainGeneral.FindAction("Stereo toggle", throwIfNotFound: true);
        m_MainGeneral_Previewtoggle = m_MainGeneral.FindAction("Preview toggle", throwIfNotFound: true);
        m_MainGeneral_Menutoggle = m_MainGeneral.FindAction("Menu toggle", throwIfNotFound: true);
        m_MainGeneral_Nextscene = m_MainGeneral.FindAction("Next scene", throwIfNotFound: true);
        m_MainGeneral_Previousscene = m_MainGeneral.FindAction("Previous scene", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Model
    private readonly InputActionMap m_Model;
    private List<IModelActions> m_ModelActionsCallbackInterfaces = new List<IModelActions>();
    private readonly InputAction m_Model_RotateX;
    private readonly InputAction m_Model_RotateY;
    private readonly InputAction m_Model_RotateZ;
    private readonly InputAction m_Model_Nextmodel;
    private readonly InputAction m_Model_Previousmodel;
    private readonly InputAction m_Model_Resettransform;
    private readonly InputAction m_Model_MoveXY;
    private readonly InputAction m_Model_MoveYZ;
    private readonly InputAction m_Model_Scale;
    public struct ModelActions
    {
        private @InputActions m_Wrapper;
        public ModelActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @RotateX => m_Wrapper.m_Model_RotateX;
        public InputAction @RotateY => m_Wrapper.m_Model_RotateY;
        public InputAction @RotateZ => m_Wrapper.m_Model_RotateZ;
        public InputAction @Nextmodel => m_Wrapper.m_Model_Nextmodel;
        public InputAction @Previousmodel => m_Wrapper.m_Model_Previousmodel;
        public InputAction @Resettransform => m_Wrapper.m_Model_Resettransform;
        public InputAction @MoveXY => m_Wrapper.m_Model_MoveXY;
        public InputAction @MoveYZ => m_Wrapper.m_Model_MoveYZ;
        public InputAction @Scale => m_Wrapper.m_Model_Scale;
        public InputActionMap Get() { return m_Wrapper.m_Model; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ModelActions set) { return set.Get(); }
        public void AddCallbacks(IModelActions instance)
        {
            if (instance == null || m_Wrapper.m_ModelActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ModelActionsCallbackInterfaces.Add(instance);
            @RotateX.started += instance.OnRotateX;
            @RotateX.performed += instance.OnRotateX;
            @RotateX.canceled += instance.OnRotateX;
            @RotateY.started += instance.OnRotateY;
            @RotateY.performed += instance.OnRotateY;
            @RotateY.canceled += instance.OnRotateY;
            @RotateZ.started += instance.OnRotateZ;
            @RotateZ.performed += instance.OnRotateZ;
            @RotateZ.canceled += instance.OnRotateZ;
            @Nextmodel.started += instance.OnNextmodel;
            @Nextmodel.performed += instance.OnNextmodel;
            @Nextmodel.canceled += instance.OnNextmodel;
            @Previousmodel.started += instance.OnPreviousmodel;
            @Previousmodel.performed += instance.OnPreviousmodel;
            @Previousmodel.canceled += instance.OnPreviousmodel;
            @Resettransform.started += instance.OnResettransform;
            @Resettransform.performed += instance.OnResettransform;
            @Resettransform.canceled += instance.OnResettransform;
            @MoveXY.started += instance.OnMoveXY;
            @MoveXY.performed += instance.OnMoveXY;
            @MoveXY.canceled += instance.OnMoveXY;
            @MoveYZ.started += instance.OnMoveYZ;
            @MoveYZ.performed += instance.OnMoveYZ;
            @MoveYZ.canceled += instance.OnMoveYZ;
            @Scale.started += instance.OnScale;
            @Scale.performed += instance.OnScale;
            @Scale.canceled += instance.OnScale;
        }

        private void UnregisterCallbacks(IModelActions instance)
        {
            @RotateX.started -= instance.OnRotateX;
            @RotateX.performed -= instance.OnRotateX;
            @RotateX.canceled -= instance.OnRotateX;
            @RotateY.started -= instance.OnRotateY;
            @RotateY.performed -= instance.OnRotateY;
            @RotateY.canceled -= instance.OnRotateY;
            @RotateZ.started -= instance.OnRotateZ;
            @RotateZ.performed -= instance.OnRotateZ;
            @RotateZ.canceled -= instance.OnRotateZ;
            @Nextmodel.started -= instance.OnNextmodel;
            @Nextmodel.performed -= instance.OnNextmodel;
            @Nextmodel.canceled -= instance.OnNextmodel;
            @Previousmodel.started -= instance.OnPreviousmodel;
            @Previousmodel.performed -= instance.OnPreviousmodel;
            @Previousmodel.canceled -= instance.OnPreviousmodel;
            @Resettransform.started -= instance.OnResettransform;
            @Resettransform.performed -= instance.OnResettransform;
            @Resettransform.canceled -= instance.OnResettransform;
            @MoveXY.started -= instance.OnMoveXY;
            @MoveXY.performed -= instance.OnMoveXY;
            @MoveXY.canceled -= instance.OnMoveXY;
            @MoveYZ.started -= instance.OnMoveYZ;
            @MoveYZ.performed -= instance.OnMoveYZ;
            @MoveYZ.canceled -= instance.OnMoveYZ;
            @Scale.started -= instance.OnScale;
            @Scale.performed -= instance.OnScale;
            @Scale.canceled -= instance.OnScale;
        }

        public void RemoveCallbacks(IModelActions instance)
        {
            if (m_Wrapper.m_ModelActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IModelActions instance)
        {
            foreach (var item in m_Wrapper.m_ModelActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ModelActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ModelActions @Model => new ModelActions(this);

    // Menu
    private readonly InputActionMap m_Menu;
    private List<IMenuActions> m_MenuActionsCallbackInterfaces = new List<IMenuActions>();
    private readonly InputAction m_Menu_Back;
    public struct MenuActions
    {
        private @InputActions m_Wrapper;
        public MenuActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Back => m_Wrapper.m_Menu_Back;
        public InputActionMap Get() { return m_Wrapper.m_Menu; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MenuActions set) { return set.Get(); }
        public void AddCallbacks(IMenuActions instance)
        {
            if (instance == null || m_Wrapper.m_MenuActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MenuActionsCallbackInterfaces.Add(instance);
            @Back.started += instance.OnBack;
            @Back.performed += instance.OnBack;
            @Back.canceled += instance.OnBack;
        }

        private void UnregisterCallbacks(IMenuActions instance)
        {
            @Back.started -= instance.OnBack;
            @Back.performed -= instance.OnBack;
            @Back.canceled -= instance.OnBack;
        }

        public void RemoveCallbacks(IMenuActions instance)
        {
            if (m_Wrapper.m_MenuActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMenuActions instance)
        {
            foreach (var item in m_Wrapper.m_MenuActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MenuActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MenuActions @Menu => new MenuActions(this);

    // Calibration
    private readonly InputActionMap m_Calibration;
    private List<ICalibrationActions> m_CalibrationActionsCallbackInterfaces = new List<ICalibrationActions>();
    private readonly InputAction m_Calibration_Nextcalibration;
    private readonly InputAction m_Calibration_Leftedge;
    private readonly InputAction m_Calibration_Rightedge;
    private readonly InputAction m_Calibration_Bottomedge;
    private readonly InputAction m_Calibration_Topedge;
    public struct CalibrationActions
    {
        private @InputActions m_Wrapper;
        public CalibrationActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Nextcalibration => m_Wrapper.m_Calibration_Nextcalibration;
        public InputAction @Leftedge => m_Wrapper.m_Calibration_Leftedge;
        public InputAction @Rightedge => m_Wrapper.m_Calibration_Rightedge;
        public InputAction @Bottomedge => m_Wrapper.m_Calibration_Bottomedge;
        public InputAction @Topedge => m_Wrapper.m_Calibration_Topedge;
        public InputActionMap Get() { return m_Wrapper.m_Calibration; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CalibrationActions set) { return set.Get(); }
        public void AddCallbacks(ICalibrationActions instance)
        {
            if (instance == null || m_Wrapper.m_CalibrationActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CalibrationActionsCallbackInterfaces.Add(instance);
            @Nextcalibration.started += instance.OnNextcalibration;
            @Nextcalibration.performed += instance.OnNextcalibration;
            @Nextcalibration.canceled += instance.OnNextcalibration;
            @Leftedge.started += instance.OnLeftedge;
            @Leftedge.performed += instance.OnLeftedge;
            @Leftedge.canceled += instance.OnLeftedge;
            @Rightedge.started += instance.OnRightedge;
            @Rightedge.performed += instance.OnRightedge;
            @Rightedge.canceled += instance.OnRightedge;
            @Bottomedge.started += instance.OnBottomedge;
            @Bottomedge.performed += instance.OnBottomedge;
            @Bottomedge.canceled += instance.OnBottomedge;
            @Topedge.started += instance.OnTopedge;
            @Topedge.performed += instance.OnTopedge;
            @Topedge.canceled += instance.OnTopedge;
        }

        private void UnregisterCallbacks(ICalibrationActions instance)
        {
            @Nextcalibration.started -= instance.OnNextcalibration;
            @Nextcalibration.performed -= instance.OnNextcalibration;
            @Nextcalibration.canceled -= instance.OnNextcalibration;
            @Leftedge.started -= instance.OnLeftedge;
            @Leftedge.performed -= instance.OnLeftedge;
            @Leftedge.canceled -= instance.OnLeftedge;
            @Rightedge.started -= instance.OnRightedge;
            @Rightedge.performed -= instance.OnRightedge;
            @Rightedge.canceled -= instance.OnRightedge;
            @Bottomedge.started -= instance.OnBottomedge;
            @Bottomedge.performed -= instance.OnBottomedge;
            @Bottomedge.canceled -= instance.OnBottomedge;
            @Topedge.started -= instance.OnTopedge;
            @Topedge.performed -= instance.OnTopedge;
            @Topedge.canceled -= instance.OnTopedge;
        }

        public void RemoveCallbacks(ICalibrationActions instance)
        {
            if (m_Wrapper.m_CalibrationActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICalibrationActions instance)
        {
            foreach (var item in m_Wrapper.m_CalibrationActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CalibrationActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CalibrationActions @Calibration => new CalibrationActions(this);

    // MainGeneral
    private readonly InputActionMap m_MainGeneral;
    private List<IMainGeneralActions> m_MainGeneralActionsCallbackInterfaces = new List<IMainGeneralActions>();
    private readonly InputAction m_MainGeneral_Calibrationtoggle;
    private readonly InputAction m_MainGeneral_Stereotoggle;
    private readonly InputAction m_MainGeneral_Previewtoggle;
    private readonly InputAction m_MainGeneral_Menutoggle;
    private readonly InputAction m_MainGeneral_Nextscene;
    private readonly InputAction m_MainGeneral_Previousscene;
    public struct MainGeneralActions
    {
        private @InputActions m_Wrapper;
        public MainGeneralActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Calibrationtoggle => m_Wrapper.m_MainGeneral_Calibrationtoggle;
        public InputAction @Stereotoggle => m_Wrapper.m_MainGeneral_Stereotoggle;
        public InputAction @Previewtoggle => m_Wrapper.m_MainGeneral_Previewtoggle;
        public InputAction @Menutoggle => m_Wrapper.m_MainGeneral_Menutoggle;
        public InputAction @Nextscene => m_Wrapper.m_MainGeneral_Nextscene;
        public InputAction @Previousscene => m_Wrapper.m_MainGeneral_Previousscene;
        public InputActionMap Get() { return m_Wrapper.m_MainGeneral; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MainGeneralActions set) { return set.Get(); }
        public void AddCallbacks(IMainGeneralActions instance)
        {
            if (instance == null || m_Wrapper.m_MainGeneralActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MainGeneralActionsCallbackInterfaces.Add(instance);
            @Calibrationtoggle.started += instance.OnCalibrationtoggle;
            @Calibrationtoggle.performed += instance.OnCalibrationtoggle;
            @Calibrationtoggle.canceled += instance.OnCalibrationtoggle;
            @Stereotoggle.started += instance.OnStereotoggle;
            @Stereotoggle.performed += instance.OnStereotoggle;
            @Stereotoggle.canceled += instance.OnStereotoggle;
            @Previewtoggle.started += instance.OnPreviewtoggle;
            @Previewtoggle.performed += instance.OnPreviewtoggle;
            @Previewtoggle.canceled += instance.OnPreviewtoggle;
            @Menutoggle.started += instance.OnMenutoggle;
            @Menutoggle.performed += instance.OnMenutoggle;
            @Menutoggle.canceled += instance.OnMenutoggle;
            @Nextscene.started += instance.OnNextscene;
            @Nextscene.performed += instance.OnNextscene;
            @Nextscene.canceled += instance.OnNextscene;
            @Previousscene.started += instance.OnPreviousscene;
            @Previousscene.performed += instance.OnPreviousscene;
            @Previousscene.canceled += instance.OnPreviousscene;
        }

        private void UnregisterCallbacks(IMainGeneralActions instance)
        {
            @Calibrationtoggle.started -= instance.OnCalibrationtoggle;
            @Calibrationtoggle.performed -= instance.OnCalibrationtoggle;
            @Calibrationtoggle.canceled -= instance.OnCalibrationtoggle;
            @Stereotoggle.started -= instance.OnStereotoggle;
            @Stereotoggle.performed -= instance.OnStereotoggle;
            @Stereotoggle.canceled -= instance.OnStereotoggle;
            @Previewtoggle.started -= instance.OnPreviewtoggle;
            @Previewtoggle.performed -= instance.OnPreviewtoggle;
            @Previewtoggle.canceled -= instance.OnPreviewtoggle;
            @Menutoggle.started -= instance.OnMenutoggle;
            @Menutoggle.performed -= instance.OnMenutoggle;
            @Menutoggle.canceled -= instance.OnMenutoggle;
            @Nextscene.started -= instance.OnNextscene;
            @Nextscene.performed -= instance.OnNextscene;
            @Nextscene.canceled -= instance.OnNextscene;
            @Previousscene.started -= instance.OnPreviousscene;
            @Previousscene.performed -= instance.OnPreviousscene;
            @Previousscene.canceled -= instance.OnPreviousscene;
        }

        public void RemoveCallbacks(IMainGeneralActions instance)
        {
            if (m_Wrapper.m_MainGeneralActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMainGeneralActions instance)
        {
            foreach (var item in m_Wrapper.m_MainGeneralActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MainGeneralActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MainGeneralActions @MainGeneral => new MainGeneralActions(this);
    public interface IModelActions
    {
        void OnRotateX(InputAction.CallbackContext context);
        void OnRotateY(InputAction.CallbackContext context);
        void OnRotateZ(InputAction.CallbackContext context);
        void OnNextmodel(InputAction.CallbackContext context);
        void OnPreviousmodel(InputAction.CallbackContext context);
        void OnResettransform(InputAction.CallbackContext context);
        void OnMoveXY(InputAction.CallbackContext context);
        void OnMoveYZ(InputAction.CallbackContext context);
        void OnScale(InputAction.CallbackContext context);
    }
    public interface IMenuActions
    {
        void OnBack(InputAction.CallbackContext context);
    }
    public interface ICalibrationActions
    {
        void OnNextcalibration(InputAction.CallbackContext context);
        void OnLeftedge(InputAction.CallbackContext context);
        void OnRightedge(InputAction.CallbackContext context);
        void OnBottomedge(InputAction.CallbackContext context);
        void OnTopedge(InputAction.CallbackContext context);
    }
    public interface IMainGeneralActions
    {
        void OnCalibrationtoggle(InputAction.CallbackContext context);
        void OnStereotoggle(InputAction.CallbackContext context);
        void OnPreviewtoggle(InputAction.CallbackContext context);
        void OnMenutoggle(InputAction.CallbackContext context);
        void OnNextscene(InputAction.CallbackContext context);
        void OnPreviousscene(InputAction.CallbackContext context);
    }
}
